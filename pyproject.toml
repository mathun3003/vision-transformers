[tool.poetry]
name = "vision-transformers"
version = "0.1.0"
description = "Repository for the Seminar about (Vision) Transformers."
authors = ["Mathis <mathun3003@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.11,<=3.13"
poethepoet = "^0.22.1"
jupyter = "^1.1.1"
numpy = "^2.1.3"
transformers = "^4.46.2"
matplotlib = "^3.9.2"
pillow = "^11.0.0"
streamlit = "^1.40.1"
watchdog = "^6.0.0"
yarl = "^1.18.0"
torch = "^2.5.1"
torchvision = "^0.20.1"

[tool.poetry.group.ci.dependencies]
mypy = "^1.5.1"
black = "^24.3.0"
pylint = "^2.17.5"
isort = "^5.12.0"
pytest = "^7.1.2"
pytest-cov = "^3.0.0"
pycodestyle = "^2.11.0"

[tool.poetry.scripts]
poe = "poethepoet:main"

[tool.poetry.plugins."poetry.application.plugin"]
poethepoet = "poethepoet.plugin:PoetryPlugin"

[tool.poe.tasks]
_clean_docs.script = "shutil:rmtree('docs/_build', ignore_errors=1)"

    [tool.poe.tasks.dev-setup]
    help = "Setup the project for development"
    cmd = "poetry install --sync --all-extras"

    [tool.poe.tasks.typing]
    help = "Run MyPy checker on the code base"
    cmd  = "mypy src"

    [tool.poe.tasks.pep8]
    help = "Runs PEP8 (pycodestyle) checker on the code base"
    cmd = "pycodestyle src --max-line-length=120"

    [tool.poe.tasks.lint]
    help = "Run pylint"
    cmd  = "pylint src"

    [tool.poe.tasks.isort]
    help = "Sort imports. This affects the code base as this makes changes to affected files."
    cmd = "isort src"

    [tool.poe.tasks.black]
    help = "Format code using black. This affects the code base as this makes changes to affected files."
    cmd = "black src"

    [tool.poe.tasks.style-black]
    help = "Validate black code style"
    cmd  = "black src --check --diff"

    [tool.poe.tasks.style-isort]
    help = "Validate isort code style"
    cmd  = "isort src --check --diff"

    [tool.poe.tasks.style]
    help = "Validate code style"
    sequence = ["style-isort", "style-black", "pep8"]
    ignore_fail = true

    [tool.poe.tasks.ci]
    help     = "Execute all CI tasks"
    sequence = ["typing", "lint", "style"]
    ignore_fail = true

    [tool.poe.tasks.clean]
    help = "Remove generated files"
    cmd  = """
    # multiline commands including comments work too!
    rm -rf .coverage
           .mypy_cache
           .pytest_cache
           ./**/__pycache__
           dist
           htmlcov
           ./docs/_build
           ./tests/fixtures/simple_project/venv
           ./tests/fixtures/venv_project/myvenv
           ./tests/fixtures/poetry_plugin_project/**/.venv
           ./tests/temp
     """

    [tool.poe.tasks.install-poetry-plugin]
    help = "Install or update this project as a plugin in poetry"
    sequence = [
      { cmd = "poetry self remove poethepoet"},
      { cmd = "poetry self add \"${POE_ROOT}[poetry_plugin]\""}
    ]
    ignore_fail = true

[tool.isort]
profile = "black"
py_version = 311

[tool.black]
line-length = 120
target-version = ["py311"]
skip-string-normalization = true

[tool.mypy]
python_version = "3.11"
ignore_missing_imports = true

[tool.pylint]
max-line-length = 120
disable = [
    "C0103",  # invalid-name
    "C0114",  # missing-module-docstring
    "W1203",  # logging-fstring-interpolation
    "E0213",  # no-self-argument
    "E1101",  # no-member
    "W0511",  # To-Dos
    "R0903",  # too-few-public-methods
    "W0603",  # global-statement
    "R0913",  # too-many-arguments
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
